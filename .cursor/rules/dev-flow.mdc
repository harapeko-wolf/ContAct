---
description: 
globs: 
alwaysApply: false
---
# 開発フロー・セットアップ・CI/CDルール

## セットアップ
- 全てDockerコンテナで開発・実行します。ホストへのPHP/Node.jsインストールは不要です。
- 初回セットアップ手順:
  1. リポジトリをクローン
  2. `docker compose up -d` で全サービス起動
  3. バックエンド: `docker compose exec backend composer install` → `.env` 設定 → `php artisan key:generate` → `php artisan migrate`
  4. フロントエンド: `docker compose exec frontend npm install`

## 実行方法
- Laravel: http://localhost:9000
- Next.js: http://localhost:3000

## テスト
- 一括テスト: `./run-tests.sh`
- 個別: `docker compose exec backend php artisan test` / `docker compose exec frontend npm run lint`

## CI/CD
- GitHub Actionsで自動テスト・ビルド・デプロイ（ECS）
- `main` へのPush/PRで `test-backend` + `test-frontend` ジョブ実行
- `README.md` や `docs/` のみの変更はCIスキップ
- リリース時はタグ付けでECS自動デプロイ

## インフラ・運用
- Docker Composeでローカル開発
- AWS（Terraform + Ansible）で本番運用
- 監視はSentryを利用

## フォルダ構成
- backend/: Laravel
- frontend/: Next.js
- docker/: Dockerfile, nginx, MySQL
- .github/: GitHub Actions
- docs/: ドキュメント
- run-tests.sh: テスト・Lint一括実行
